package com.example.dell.compass4;
                                                                                                    //Libraries
import android.Manifest;
import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.pm.PackageManager;
import android.graphics.Color;
import android.graphics.Paint;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.location.Location;
import android.os.Bundle;
import android.os.PersistableBundle;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.v4.app.ActivityCompat;
import android.view.animation.Animation;
import android.view.animation.RotateAnimation;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;
import com.google.android.gms.location.FusedLocationProviderClient;                                 //Google services libraries
import com.google.android.gms.location.LocationServices;
import com.google.android.gms.tasks.OnSuccessListener;

//import com.google.android.gms.common.api.GoogleApiClient;

                                                                                                    //Main class starts here
public class MainActivity extends Activity implements SensorEventListener {

    TextView tv;                                                                                    //TextView for Readings from the sensor - ie degree
    TextView latLong;                                                                               //TextView for Readings from the location services - ie lattitude and longitude
    TextView Compass;                                                                               //textView for heading of the app
    double Long;                                                                                    //variable to store value of Longitude
    double Lat;                                                                                     //variable to store value of Lattitude
    private SensorManager sm;
    float[] accelerometerValues = new float[3];                                                     //variables to store values of accelerometer
    float[] magneticFieldValues = new float[3];                                                     //variables to store values of mangnetometer
    private ImageView Compass4;                                                                     //Image variable
    private float CurrentDegree = 0f;                                                               //Setting the value of degree as 0
                                                                                                    //Accelerometer and magneto meter sensor variables
    private Sensor aSensor;
    private Sensor mSensor;
    //private boolean mLastAccelerometerSet = false, mLastMagnetometerSet = false;
    private FusedLocationProviderClient mFusedLocationClient;                                       //Location services variable


    @Override
    public void onCreate(@Nullable Bundle savedInstanceState, @Nullable PersistableBundle persistentState)
    {
        super.onCreate(savedInstanceState, persistentState);
    }

    @Override                                                                                       //Call the super class onCreate to complete the creation of activity like
    protected void onCreate(Bundle savedInstanceState)
    {
        super.onCreate(savedInstanceState);                                                         //Call the superclass method first
        setContentView(R.layout.activity_main);
        tv = findViewById(R.id.tv);
        tv.setTextColor(Color.BLACK);                                                               //Setting color of the text as BLACK
        latLong = findViewById(R.id.locationText);
        latLong.setTextColor(Color.GRAY);                                                           //Setting color of the text as GRAY
        //latLong.setPaintFlags(latLong.getPaintFlags() | Paint.UNDERLINE_TEXT_FLAG);
        Compass4 = findViewById(R.id.pointer);                                                      //our compass image
        Compass = findViewById(R.id.Compass1);
        Compass.setTextColor(Color.MAGENTA);                                                        //Setting color of the text as MAGENTA
        Compass.setPaintFlags(Compass.getPaintFlags() | Paint.UNDERLINE_TEXT_FLAG);                 //Underlining the HEADING
        initialization();                                                                           //Calling initializing function
    }

    private void initialization()
    {
                                                                                                    //Initialize android device sensor capabilities
        sm = (SensorManager)getSystemService(SENSOR_SERVICE);
        assert sm != null;
        mSensor = sm.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);                                  //Assigning mSensor as magnetic field type sensor
        aSensor = sm.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);                                   //Assigning aSensor as Accelerometer type sensor
                                                                                                    //Checking for permission from the device (Location services permission)
        if (ActivityCompat.checkSelfPermission(this,
                Manifest.permission.ACCESS_FINE_LOCATION)!= PackageManager.PERMISSION_GRANTED
                && ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION)
                != PackageManager.PERMISSION_GRANTED)
        {
            ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.ACCESS_FINE_LOCATION,
                Manifest.permission.ACCESS_COARSE_LOCATION}, 1 );
        }
        else
        {
                                                                                                    //location
            mFusedLocationClient = LocationServices.getFusedLocationProviderClient(this);
        }


                 mFusedLocationClient.getLastLocation().addOnSuccessListener(this, new OnSuccessListener<Location>()
                {
                    @SuppressLint({"SetTextI18n", "DefaultLocale"})
                    @Override
                    public void onSuccess(Location location)
                    {
                                                                                                    //Got last known location. In some rare situations this can be null.
                        if (location != null)
                        {
                                                                                                    //Logic to handle location object
                            Lat = location.getLatitude();                                           //Storing Lat as lattitude
                            Long = location.getLongitude();                                         //Storing Long as longitude
                                                                                                    //trimming the long and lat to two decimal places for better display
                            latLong.setText(String.format("%.2f",Lat)+ " "+"Lat" + " , " + String.format("%.2f",Long)+ " "+"Long");
                            //latLong.setText(location.getLatitude()+ "- "+"Lat" + " , " + location.getLongitude()+ "- "+"Long");
                        }
                    }
                }
                );
    }

    @SuppressLint("ShowToast")
    @Override                                                                                       //Location Services function
    public void onRequestPermissionsResult(int requestCode,
                                           @NonNull String permissions[], @NonNull int[] grantResults)
    {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        switch (requestCode)
        {
                                                                                                    //Location
            case 1:
            {
                                                                                                    // If request is cancelled, the result arrays are empty.
                if ((grantResults.length > 0) && (grantResults[0] == PackageManager.PERMISSION_GRANTED))
                {
                    Toast.makeText(this,"Permission Granted", Toast.LENGTH_LONG);        // permission was granted
                } else
                {                                                                                   // permission denied
                    Toast.makeText(this,"Need permission to access Latitude and Longitude", Toast.LENGTH_LONG);
                                                                                                    // functionality that depends on this permission.
                }
            }
                                                                                                    // other 'case' lines to check for other
                                                                                                    // permissions this app might request.
        }
    }

    @Override                                                                                       //Method to release the sensors in action so that they wont drain the battery
    protected void onPause()
    {
        super.onPause();                                                                            //Always call the superclass method first
        sm.unregisterListener(this, aSensor);                                                //Unregistering sensors to save battery
        sm.unregisterListener(this, mSensor);
    }


    @Override                                                                                       //Method to resume the last known state and reinitializing the sesnors
    protected void onResume()
    {
        super.onResume();                                                                           //Always call the superclass method first
        // SensorEventListener listener;
        sm.registerListener(this, aSensor, SensorManager.SENSOR_DELAY_GAME);
        sm.registerListener(this, mSensor, SensorManager.SENSOR_DELAY_GAME);
    }

    @Override
    public void onSensorChanged(SensorEvent event)
    {                                                                                               //Method to perform logic when the sesnor value changes
        final float alpha = 0.97f;
        float [] I = new float[9];
        float[] R = new float[9];
        float[] newvalue = new float[3] ;                                                           //Variable to store the degree value
        synchronized (this)
        {
            if (event.sensor.getType() == Sensor.TYPE_ACCELEROMETER)
            {                                                                                       //Storing data from accelerometer sensor to its desired variable
                accelerometerValues[0] = alpha * accelerometerValues[0] + (1 - alpha) * event.values[0];
                accelerometerValues[1] = alpha * accelerometerValues[1] + (1 - alpha) * event.values[1];
                accelerometerValues[2] = alpha * accelerometerValues[2] + (1 - alpha) * event.values[2];
                System.arraycopy(event.values, 0, accelerometerValues, 0, event.values.length);
                //mLastAccelerometerSet = true;

            }
            if (event.sensor.getType() == Sensor.TYPE_MAGNETIC_FIELD)
            {                                                                                       //Storing data from magnetometer sensor to its desired variable
                System.arraycopy(event.values, 0, magneticFieldValues, 0, event.values.length);
                //mLastMagnetometerSet = true;
                magneticFieldValues[0] = alpha * magneticFieldValues[0] + (1 - alpha) * event.values[0];
                magneticFieldValues[1] = alpha * magneticFieldValues[1] + (1 - alpha) * event.values[1];
                magneticFieldValues[2] = alpha * magneticFieldValues[2] + (1 - alpha) * event.values[2];
            }
                                                                                                    //Checking the status of the required values
            boolean Success = SensorManager.getRotationMatrix(R, I, accelerometerValues, magneticFieldValues);
            if (Success)
            {
                newvalue = SensorManager.getOrientation(R, newvalue);                               //Assigning the values from both the sesnors to new variable
                float degre = (float) Math.toDegrees(newvalue[0]);                                  //Converting to degree
                degre = (degre + 360)% 360;                                                         //Logic to find the degrees
                calculateOrientation(degre);                                                        //Calling the function by passing values of degree
            }
        }
    }

    @SuppressLint({"SetTextI18n", "DefaultLocale"})
    private void calculateOrientation(float newdeg){                                                //Function to calculate orientation values depending on degrees
    /*  float[] values = new float[3];                                                              //Earlier logic
        float [] I = new float[9];
        float[] R = new float[9];

        if (mLastAccelerometerSet && mLastMagnetometerSet) {
            SensorManager.getRotationMatrix(R, I, accelerometerValues, magneticFieldValues);
            values = SensorManager.getOrientation(R, values);

            float degree = (float) Math.toDegrees(values[0]+360)%360;
            //float degree  = Math.round(values[0]);
            //values[1] = (float) Math.toDegrees(values[1]);
            //values[2] = (float) Math.toDegrees(values[2]);
            //String temp = Float.toString(degree);
    */

        if (newdeg >= 22 && newdeg <= 67)
        {                                                         //Logic for East , West, North, South depending upon the degree
            tv.setText("NorthEast  " + String.format("%.2f", newdeg) + "°");
            //else if (degree >= 337 && degree <= 21) {
            //tv.setText("North        " + String.format("%.2f",degree)+"°");
        } else if (newdeg >= 68 && newdeg <= 111)
        {
            tv.setText("East         " + String.format("%.2f", newdeg)+"°");
        } else if (newdeg >= 112 && newdeg <= 156)
        {
            tv.setText("SouthEast  " + String.format("%.2f", newdeg)+"°");
        } else if (newdeg >= 157 && newdeg <= 202)
        {
            tv.setText("South        " + String.format("%.2f", newdeg)+"°");
        } else if (newdeg >= 203 && newdeg <= 247)
        {
            tv.setText("SouthWest  " + String.format("%.2f", newdeg)+"°");
        } else if (newdeg >= 248 && newdeg <= 292)
        {
            tv.setText("West         " + String.format("%.2f", newdeg)+"°");
        } else if (newdeg >= 293 && newdeg <= 336)
        {
            tv.setText("NorthWest  " + String.format("%.2f", newdeg)+"°");
        } else
            tv.setText("North        " + String.format("%.2f", newdeg)+"°");


        // Log.d(TAG, "azimuth (deg): " + degree);                                                  //Log table

        RotateAnimation ra = new RotateAnimation(                                                   //Animation of the figure
                -CurrentDegree, -newdeg, Animation.RELATIVE_TO_SELF,
                0.5f, Animation.RELATIVE_TO_SELF, 0.5f);
        CurrentDegree = newdeg;
                                                                                                    //how long the animation will take place
        ra.setDuration(400);
                                                                                                    //set the animation after the end of the reservation status
        ra.setFillAfter(true);
                                                                                                    //Start the animation
        Compass4.startAnimation(ra);
    }

    @Override
    public void onAccuracyChanged(Sensor sensor, int accuracy)
    {
    }
}
